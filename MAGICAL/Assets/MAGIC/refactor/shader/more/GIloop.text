//direct light
            //shader: shadow
        //set texture
        //shader: baking render mesh
            //get light direction
            //get normal (vtx or tx sample)
            //get albedo (vtx or tx sample)
            //do lambert
            //apply shadow (tx sample)

            
            //gather loop (compute in c# and pass ray result)
        //shader: for each rays
            //hash position
            //hash to atlas position

            //? //when is this happening on screen raster or tx runtime?
            //get normal 1++(vtx or tx sample) --LMGB
            //box project normal ?	//dont remember the rational
            //compute or apply ray
            //sample cubemap atlas 2++(tx sample) --lightprobe texture

            //direct light
                //runtime light
                    //*light test
                    //*sky occlusion (dome)
                    //*shadow sampling 3++(tx sample) --lightprobe
                //decoupled light rendering
                    //direct light sampling 3++(tx sample) --direct light

            //accumulate ray in buffer
                //query display lightmap 4++(tx sample) --
                
                //add (direct light map) 3++(tx sample) //already masked by shadow 
                //query skybox (tx sample) //could be color or dome color, not tx, in simpler form
                //mask skybox with cubemap //already sampled with uv
                //attenuate sample with distance //5???(tx sample) sample lightmap position OR channel in cubemap
                //*****resolve sample brdf(sample normal, albedo)//7,8???(tx sample)
                //sample + skybox (should be mutually exclusive)

                //chroma lum separation
                //divide by num ray
                //sample accum 6++(vtx or tx sample)
                //accumulation (accum + sample accum) //display materal must reconstruct RGB from chroma lum
                //return 16bit encoding
            //end shader
        
        //sampling count (max 8)
            //init (min1 max2)
                //LMGB      --       //get normal 1++(vtx or tx sample)
                //cubemap   --       //sample cubemap atlas 2++(tx sample)
            //light sampling (min1)
                //cubemap   --       //*shadow sampling 3++(tx sample)
                //directLM  --       //direct light sampling 3++(tx sample)
            //accumulation (min3 max4)
                //displayLM --       //query display buffer lightmap 4++(tx sample)
                //LMGB/cube --       //attenuate direct with distance //5???(tx sample) sample lightmap position OR channel in cubemap
                //LMGB      --       //*****resolve sample brdf(sample normal, albedo)//7,8???(tx sample)
                //accumLM   --       //sample accum buffer 6++(vtx or tx sample)
            //totalmin5 totalmax7

        //if last ray swap double buffering for display (c#)
